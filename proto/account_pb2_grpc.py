# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import account_pb2 as account__pb2


class LoginAccountStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/RECUBE.LoginAccount/Login',
                request_serializer=account__pb2.LoginStatement.SerializeToString,
                response_deserializer=account__pb2.Account.FromString,
                )
        self.SingUp = channel.unary_unary(
                '/RECUBE.LoginAccount/SingUp',
                request_serializer=account__pb2.LoginStatement.SerializeToString,
                response_deserializer=account__pb2.AccountCreateStatement.FromString,
                )
        self.ContinuationSignal = channel.unary_unary(
                '/RECUBE.LoginAccount/ContinuationSignal',
                request_serializer=account__pb2.ContinuationKey.SerializeToString,
                response_deserializer=account__pb2.ContinuationResult.FromString,
                )


class LoginAccountServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SingUp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContinuationSignal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LoginAccountServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=account__pb2.LoginStatement.FromString,
                    response_serializer=account__pb2.Account.SerializeToString,
            ),
            'SingUp': grpc.unary_unary_rpc_method_handler(
                    servicer.SingUp,
                    request_deserializer=account__pb2.LoginStatement.FromString,
                    response_serializer=account__pb2.AccountCreateStatement.SerializeToString,
            ),
            'ContinuationSignal': grpc.unary_unary_rpc_method_handler(
                    servicer.ContinuationSignal,
                    request_deserializer=account__pb2.ContinuationKey.FromString,
                    response_serializer=account__pb2.ContinuationResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RECUBE.LoginAccount', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LoginAccount(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RECUBE.LoginAccount/Login',
            account__pb2.LoginStatement.SerializeToString,
            account__pb2.Account.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SingUp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RECUBE.LoginAccount/SingUp',
            account__pb2.LoginStatement.SerializeToString,
            account__pb2.AccountCreateStatement.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContinuationSignal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RECUBE.LoginAccount/ContinuationSignal',
            account__pb2.ContinuationKey.SerializeToString,
            account__pb2.ContinuationResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
